一、测试目的

	比较传统表结构方式和Blob结构方式在不同的数量级下，插入、加载数据的性能

二、测试环境

	两种方式使用完全一样的对象字段，在同样的数据量下进行测试

	数据量是由吴旭提供的一个过了新手引导期玩家的所有信息（可以认为是玩家的平均水平），包括：
	1 个Player
	20 个PlayerBag
	10 个PlayerEventSys
	10 个PlayerFriend
	1 个PlayerGuaji
	1 个PlayerMsg
	1 个PlayerRecharge
	60 个PlayerWuxingCard
	70 个PlayerTaskLevelBattleAgain
	1 个PlayerWuxingRaffleInfo

	PS：
		所有表都已添加对player_id_字段的索引
		Java序列化方式：Google Protoco Buffers
		
	Blob的优势：
		速度比较快
		可以控制数据库表的数量级（跟Plyaer数量一致）
		可以无缝切换到文件系统存储或者Redis等Nosql存储
	Blob的劣势：
		测试时，无法通过数据库客户端直接修改数值（解决方案是在游戏内部做debug命令）
		坏数据不能直接通过数据库修改（需要另外维护工具）

三、 插入测试（进行测试1.2传统方式单线程插入mysqld cpu占用基本在20%-25%上下，进行测试3时，cpu基本在25%-32%；Blob方式mysqld cpu占用在15%上下）
	
	测试1

		数据库原有用户数：0
		插入用户条：1000
		传统表结构方式插入[1000]条玩家数据耗时[179341]ms 平均每个玩家数据初始化耗时[179.341]ms
		Blob方式插入[1000]条玩家数据耗时[5819]ms 平均每个玩家数据初始化耗时[5.819]ms

	测试2
		
		数据库原有用户数：1000
		插入用户数：9000
		传统表结构方式插入[9000]条玩家数据耗时[1562210]ms 平均每个玩家数据初始化耗时[173.57888888888888]ms
		Blob方式插入[9000]条玩家数据耗时[46560]ms 平均每个玩家数据初始化耗时[5.173333333333333]ms
		
	测试3
		
		数据库原有用户数：10000
		插入用户数：90000
		传统表结构方式插入[90000]条玩家数据耗时[16091619]ms 平均每个玩家数据初始化耗时[178.79576666666668]ms
		Blob方式插入[90000]条玩家数据耗时[495903]ms 平均每个玩家数据初始化耗时[5.510033333333333]ms
	
	测试4
		数据库原有用户数：101001
		插入用户数：398999
		传统表结构方式插入[398999]条玩家数据耗时[61196071]ms 平均每个玩家数据初始化耗时[153.37399592480182]ms
		Blob方式插入[398999]条玩家数据耗时[2139170]ms 平均每个玩家数据初始化耗时[5.361341757748766]ms
		
四、加载测试（传统方式mysqld cpu占用25%上下，Blob方式mysqld cpu占用15%上下）

	测试1
	
		现有玩家数：100000
		加载玩家数：10000
		传统表结构方式加载[10000]条玩家数据耗时[172619]ms 平均每个玩家数据耗时[17.2619]ms
        	Blob方式加载[10000]条玩家数据耗时[51881]ms 平均每个玩家数据耗时[5.1881]ms
		
	测试2
	
		现有玩家数：100000
		加载玩家数：20000
		传统表结构方式加载[20000]条玩家数据耗时[335053]ms 平均每个玩家数据耗时[16.75265]ms
		Blob方式加载[20000]条玩家数据耗时[90876]ms 平均每个玩家数据耗时[4.5438]ms
	
	测试3
	
		现有玩家数：100000
		加载玩家数：100000
		传统表结构方式加载[100000]条玩家数据耗时[1764271]ms 平均每个玩家数据耗时[17.64271]ms
		Blob方式加载[100000]条玩家数据耗时[516708]ms 平均每个玩家数据耗时[5.16708]ms
		
	测试4
	
		现有玩家数：500000
		加载玩家数：200000
		传统表结构方式加载[200000]条玩家数据耗时[3912108]ms 平均每个玩家数据耗时[19.56054]ms
		Blob方式加载[200000]条玩家数据耗时[1026838]ms 平均每个玩家数据耗时[5.13419]ms
		
 五、 数据大小
 
	10000玩家占用heap大小500M，序列化后大小150M
	


